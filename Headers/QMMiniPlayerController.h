//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jan  4 2017 14:06:37).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SkinViewController.h"

#import "ImageManagerDelegate-Protocol.h"
#import "NewPlayingListBaseVCDelegate-Protocol.h"
#import "QMMiniPlayerViewDelegate-Protocol.h"

@class NSArray, NSMutableArray, NSString, NewPlayingListNormalVC, NewPlayingListRadioVC, PlayList, QMMiniPlayerView, SongInfo, UIImageView, UIToolbar;

@interface QMMiniPlayerController : SkinViewController <QMMiniPlayerViewDelegate, ImageManagerDelegate, NewPlayingListBaseVCDelegate>
{
    _Bool isManualShowMiniPlay;
    SongInfo *lastPlaySong;
    UIToolbar *tempView;
    _Bool _isLoadDefaultPlayList;
    _Bool _isBlackModel;
    _Bool _isLocalList;
    _Bool _isSlidedOnThisLife;
    _Bool _shouldReloadSongsOnScroll;
    int _lastLaunchCount;
    NSMutableArray *_songListArray;
    QMMiniPlayerView *_miniPlayerView;
    SongInfo *_curPlayingSong;
    SongInfo *_preSong;
    SongInfo *_nextSong;
    NewPlayingListNormalVC *_playListNewVC;
    NewPlayingListRadioVC *_radioPlayListNewVC;
    NSArray *_currentPlayingSongList;
    PlayList *_playListObject;
    long long _preIndex;
    long long _nextIndex;
    NSMutableArray *_songs;
    UIImageView *_customBg;
}

+ (id)sharedMiniPlayerController;
@property(nonatomic) _Bool shouldReloadSongsOnScroll; // @synthesize shouldReloadSongsOnScroll=_shouldReloadSongsOnScroll;
@property(retain) UIImageView *customBg; // @synthesize customBg=_customBg;
@property(nonatomic) _Bool isSlidedOnThisLife; // @synthesize isSlidedOnThisLife=_isSlidedOnThisLife;
@property(nonatomic) int lastLaunchCount; // @synthesize lastLaunchCount=_lastLaunchCount;
@property(nonatomic) _Bool isLocalList; // @synthesize isLocalList=_isLocalList;
@property(nonatomic) _Bool isBlackModel; // @synthesize isBlackModel=_isBlackModel;
@property(retain, nonatomic) NSMutableArray *songs; // @synthesize songs=_songs;
@property(nonatomic) long long nextIndex; // @synthesize nextIndex=_nextIndex;
@property(nonatomic) long long preIndex; // @synthesize preIndex=_preIndex;
@property(retain, nonatomic) PlayList *playListObject; // @synthesize playListObject=_playListObject;
@property(retain, nonatomic) NSArray *currentPlayingSongList; // @synthesize currentPlayingSongList=_currentPlayingSongList;
@property(retain, nonatomic) NewPlayingListRadioVC *radioPlayListNewVC; // @synthesize radioPlayListNewVC=_radioPlayListNewVC;
@property(retain, nonatomic) NewPlayingListNormalVC *playListNewVC; // @synthesize playListNewVC=_playListNewVC;
@property(nonatomic) _Bool isLoadDefaultPlayList; // @synthesize isLoadDefaultPlayList=_isLoadDefaultPlayList;
@property(retain, nonatomic) SongInfo *nextSong; // @synthesize nextSong=_nextSong;
@property(retain, nonatomic) SongInfo *preSong; // @synthesize preSong=_preSong;
@property(retain, nonatomic) SongInfo *curPlayingSong; // @synthesize curPlayingSong=_curPlayingSong;
@property(retain, nonatomic) QMMiniPlayerView *miniPlayerView; // @synthesize miniPlayerView=_miniPlayerView;
@property(retain, nonatomic) NSMutableArray *songListArray; // @synthesize songListArray=_songListArray;
- (void).cxx_destruct;
- (void)actionSheet:(id)arg1 actionSheetButtonClickedAtIndex:(long long)arg2;
- (void)deleteCurrentSong;
- (void)showMorePanel:(id)arg1;
- (void)downLoadSong:(id)arg1;
- (void)addToMyLoveOnline;
- (void)deleteLoveSong;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)handleTrashCanBtnTapped;
- (void)handleTranshCanSingleRadio;
- (void)handleTranshCanGuessYouLikeRadio;
- (void)handleTrashCanAction;
- (void)removeCurrentAndPlayNextRadioSong;
- (void)loginOKCall;
- (void)updateIsMyFavorite:(id)arg1;
- (void)updateDownLoadBtn;
- (int)getCurrentSongAssetsType;
- (void)_onNotifySongEntityFileChanged:(id)arg1;
- (void)onNotifyLogout:(id)arg1;
- (void)onNotifyLoginSuccess:(id)arg1;
- (void)onNotifyDeletedSongFrom201:(id)arg1;
- (void)onNotifySongsChangedLoveState:(id)arg1;
- (void)freshFrameToAppWindowMode:(int)arg1;
- (void)freshFrame:(long long)arg1;
- (struct CGRect)reFrame;
- (void)reLayoutTo:(int)arg1;
- (void)reLayout:(long long)arg1;
- (_Bool)needReFrame;
- (void)clearAllSongs;
- (void)showMiniPlayerViewWhenClear;
- (void)resetBgImageForMinibar;
- (void)setProfileBgImageForMinibar:(id)arg1;
- (void)miniPlayerShowPlayingView;
- (void)delayShowPlayingView;
- (void)showPlayingView;
- (void)refreshSongListTitleWhendeleteSong;
- (void)onEnterForeground:(id)arg1;
- (void)onNotifyNowPlayingListChange:(id)arg1;
- (void)onNotifyNextSongsQueueChanged:(id)arg1;
- (void)onNotifyPlayModeChanged:(id)arg1;
- (void)delayShowPlayList:(id)arg1;
- (void)showPlayList:(id)arg1;
- (void)initRadioPlayingListVC;
- (void)initPlayingListVC;
- (void)playPreSong:(id)arg1;
- (void)playNextSong:(id)arg1;
- (void)setSlidCount;
- (void)playOrPauseButtonPressed:(id)arg1;
- (void)openSongListFromToday;
- (void)autoPlayNextSong;
- (unsigned long long)infoViewIndexForSong:(id)arg1;
- (void)updateImageInInfoView:(id)arg1 ForSong:(id)arg2;
- (void)cropAndUpdateImage:(id)arg1 forSong:(id)arg2;
- (void)updateInfoViewForSong:(id)arg1;
- (void)setSonginfoToSonginfoView;
- (void)refreshSongInfo;
- (void)updateMiniPlayerMusicInfo:(id)arg1 PlayList:(id)arg2 autoPlay:(_Bool)arg3;
- (void)updateTime:(double)arg1 duration:(double)arg2 loading:(double)arg3 buffer:(double)arg4 starting:(double)arg5;
- (void)getAllSongAndInsertSongs;
- (void)updateMiniPlayStateChage:(unsigned long long)arg1 isLocalFile:(_Bool)arg2;
- (void)setPlayButtonPause;
- (void)hiddenMiniPlayer;
- (void)setMiniPlayerEmpty;
- (void)showMiniPlayerView:(_Bool)arg1;
- (void)showMiniPlayerView;
- (_Bool)canShowPlayingWhenSwitchOpen;
- (void)clickEmptyMiniPlayer;
- (int)vcType;
- (id)getAllVCType;
- (void)onNotifyUserLanguageChanged:(id)arg1;
- (void)onColorStyleChanged;
- (void)loadView;
- (void)dealloc;
- (void)viewDidAppear:(_Bool)arg1;
- (void)didReceiveMemoryWarning;
- (void)viewDidLoad;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

