//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jan  4 2017 14:06:37).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

//#import "ClusterInfo.h"

@class AlbumInfo, NSArray, NSMutableArray, NSMutableDictionary, NSString, SingerInfo;

//@interface SongInfo : ClusterInfo
@interface SongInfo : NSObject
{
    unsigned long long song_ID;
    int song_Type;
    int song_error;
    NSString *song_DownLoadFilePath;
    int song_DownloadFileSize;
    NSString *song_IPODAssertURL;
    NSString *song_LyricFilePath;
    NSMutableArray *delegateArray;
    unsigned long long iFackSongId;
    _Bool song_HasFingerPrinted;
    unsigned long long fingerSongId;
    float addTime;
    int size;
    int n64Size;
    _Bool isWord;
    int nForbitFlag;
    int standardFileSize;
    int topFileSize;
    //AlbumInfo *albumInfo;
    NSString *kgeSongMid;
    _Bool isOnlyListenPart;
    _Bool _isLongVoice;
    _Bool _isPlayingLocalFile;
    _Bool _isSongNew;
    int validateStatus;
    int song_EQid;
    int song_lang;
    int song_tag;
    int song_version;
    int isExclusive;
    int _aacFileSize;
    int _cdIdx;
    int _belongCD;
    unsigned int _controlBits;
    int _flacSize;
    double song_Duration;
    //SingerInfo *defaultSinger;
    NSArray *singerList;
    NSString *song_Mid;
    NSString *song_Vid;
    NSString *docid;
    NSString *song_mediaMid;
    unsigned long long playCount;
    NSString *_songCustomImgUrl;
    unsigned long long _trySize;
    unsigned long long _tryBegin;
    unsigned long long _tryEnd;
    NSString *_songDesc;
    unsigned long long _lastPlayTime;
    NSString *_cacheTodownloadedFilePath;
    unsigned long long _downloadFailedTimes;
    NSMutableDictionary *_dicRate2URL;
}

+ (int)pcImportSongType;
+ (void)addcachedSongToDownloadSong:(id)arg1 assertType:(int)arg2 songRate:(int)arg3 filePath:(id)arg4;
+ (_Bool)canDownLoadAfterCacheSong:(id)arg1 assertType:(int)arg2 songRate:(int)arg3;
+ (_Bool)isSameRateByRate1:(int)arg1 toRate2:(int)arg2;
+ (long long)compareSongRateType:(int)arg1 to:(int)arg2;
+ (_Bool)isHQQuality:(int)arg1;
+ (_Bool)isStandardQuality:(int)arg1;
+ (id)get320Mp3UrlFileNameInArray:(id)arg1;
+ (unsigned long long)getHeaderSizeByRate:(int)arg1 duration:(double)arg2;
+ (int)getLowerQuality:(int)arg1 isListen:(int)arg2;
+ (int)getLowerQuality:(int)arg1;
+ (int)convertESongTypeToSongRateType:(int)arg1;
+ (int)_convertSongRateTypeToESongType:(int)arg1;
+ (int)convertSongRateTypeToESongType:(int)arg1;
+ (int)getRateByExtName:(id)arg1;
+ (id)getQualityNameBySongRate:(int)arg1;
+ (id)getExtNameByRate:(int)arg1;
+ (unsigned int)getBytePerSecond:(int)arg1;
+ (unsigned int)getFirstPieceCacheSongSizeByQuality:(int)arg1 songInfo:(id)arg2 duration:(double)arg3 assetsType:(int)arg4;
+ (_Bool)isExistLocalFileBySongType:(int)arg1 dbDownLoadFilePath:(id)arg2;
+ (id)translateFromOtherAppFile:(id)arg1;
+ (id)translateSongFromData:(id)arg1 fromServer:(_Bool)arg2 containHilightInfo:(_Bool)arg3 expInfo:(id *)arg4 assetsType:(int)arg5 source:(id)arg6;
+ (id)translateSongFromData:(id)arg1 fromServer:(_Bool)arg2 containHilightInfo:(_Bool)arg3 expInfo:(id *)arg4 source:(id)arg5;
//+ (id)translateSongFromNode:(struct _xmlNode *)arg1 fromServer:(_Bool)arg2 containHilightInfo:(_Bool)arg3 expInfo:(id *)arg4 assetsType:(int)arg5 source:(id)arg6;
//+ (id)translateSongFromNode:(struct _xmlNode *)arg1 fromServer:(_Bool)arg2 containHilightInfo:(_Bool)arg3 expInfo:(id *)arg4 source:(id)arg5;
//+ (id)translateSongFromNode:(struct _xmlNode *)arg1 fromServer:(_Bool)arg2 source:(id)arg3;
//+ (id)translateSongFromJsonDataXXX:(id)arg1 assetsType:(int)arg2 source:(id)arg3;
+ (id)translateSongFromJsonData:(id)arg1 assetsType:(int)arg2 source:(id)arg3;
+ (unsigned long long)modifySongID:(unsigned long long)arg1 songType:(int)arg2;
+ (id)translateSongFromJsonData:(id)arg1 source:(id)arg2;
+ (int)getURLIndex:(int)arg1;
+ (int)songRateTypeByQuality:(int)arg1;
@property(retain) NSMutableDictionary *dicRate2URL; // @synthesize dicRate2URL=_dicRate2URL;
@property(nonatomic) unsigned long long downloadFailedTimes; // @synthesize downloadFailedTimes=_downloadFailedTimes;
@property(retain, nonatomic) NSString *cacheTodownloadedFilePath; // @synthesize cacheTodownloadedFilePath=_cacheTodownloadedFilePath;
@property(nonatomic) unsigned long long lastPlayTime; // @synthesize lastPlayTime=_lastPlayTime;
@property _Bool isSongNew; // @synthesize isSongNew=_isSongNew;
@property(retain) NSString *songDesc; // @synthesize songDesc=_songDesc;
@property(nonatomic) _Bool isPlayingLocalFile; // @synthesize isPlayingLocalFile=_isPlayingLocalFile;
@property(nonatomic) unsigned long long tryEnd; // @synthesize tryEnd=_tryEnd;
@property(nonatomic) unsigned long long tryBegin; // @synthesize tryBegin=_tryBegin;
@property(nonatomic) unsigned long long trySize; // @synthesize trySize=_trySize;
@property int flacSize; // @synthesize flacSize=_flacSize;
@property(nonatomic) unsigned int controlBits; // @synthesize controlBits=_controlBits;
@property _Bool isLongVoice; // @synthesize isLongVoice=_isLongVoice;
@property int belongCD; // @synthesize belongCD=_belongCD;
@property int cdIdx; // @synthesize cdIdx=_cdIdx;
@property(retain) NSString *songCustomImgUrl; // @synthesize songCustomImgUrl=_songCustomImgUrl;
@property int aacFileSize; // @synthesize aacFileSize=_aacFileSize;
@property(nonatomic) unsigned long long playCount; // @synthesize playCount;
@property(retain) NSString *song_mediaMid; // @synthesize song_mediaMid;
@property int isExclusive; // @synthesize isExclusive;
@property(retain) NSString *kgeSongMid; // @synthesize kgeSongMid;
@property int song_version; // @synthesize song_version;
@property int song_tag; // @synthesize song_tag;
@property int song_lang; // @synthesize song_lang;
@property(retain) NSString *docid; // @synthesize docid;
@property int song_EQid; // @synthesize song_EQid;
@property(retain) NSString *song_Vid; // @synthesize song_Vid;
@property(retain) NSString *song_Mid; // @synthesize song_Mid;
@property int validateStatus; // @synthesize validateStatus;
@property(retain) AlbumInfo *albumInfo; // @synthesize albumInfo;
@property(retain) NSArray *singerList; // @synthesize singerList;
@property int nForbitFlag; // @synthesize nForbitFlag;
@property _Bool isWord; // @synthesize isWord;
@property int topFileSize; // @synthesize topFileSize;
@property int standardFileSize; // @synthesize standardFileSize;
@property int n64Size; // @synthesize n64Size;
@property int size; // @synthesize size;
@property float addTime; // @synthesize addTime;
@property _Bool isOnlyListenPart; // @synthesize isOnlyListenPart;
@property(nonatomic) double song_Duration; // @synthesize song_Duration;
@property unsigned long long iFackSongId; // @synthesize iFackSongId;
@property(nonatomic) unsigned long long fingerSongId; // @synthesize fingerSongId;
@property(nonatomic) _Bool song_HasFingerPrinted; // @synthesize song_HasFingerPrinted;
@property(retain) NSMutableArray *delegateArray; // @synthesize delegateArray;
@property int song_error; // @synthesize song_error;
@property(retain) NSString *song_LyricFilePath; // @synthesize song_LyricFilePath;
@property(retain) NSString *song_IPODAssertURL; // @synthesize song_IPODAssertURL;
@property(readonly) int song_Type; // @synthesize song_Type;
@property(readonly) unsigned long long song_ID; // @synthesize song_ID;
- (void)setCdIndxByString:(id)arg1;
- (_Bool)isShouldQuery;
- (id)getImageUrlByImageOption:(unsigned long long)arg1;
- (id)getImageUrlConsideringNOAlbumSongByImageOption:(unsigned long long)arg1;
- (_Bool)hasDownloadFileForPlayWithRate:(int)arg1;
- (id)getDisableActionTitleByAssetsType:(int)arg1;
@property(readonly, nonatomic) unsigned long long rightAlertID;
@property(readonly, nonatomic) int song_ErrDownMsgId;
@property(readonly, nonatomic) int song_ErrFavMsgId;
@property(readonly, nonatomic) int song_ErrShareMsgId;
@property(readonly, nonatomic) int song_ErrMsgId;
- (id)get320Mp3UrlFileName;
- (_Bool)_isControlBitsValided;
- (unsigned long long)getHeaderSizeByRate:(int)arg1 assetsType:(int)arg2;
- (id)getSongInfoKey;
- (id)_createURLByRate:(int)arg1 forDownload:(_Bool)arg2 assetsType:(int)arg3;
- (_Bool)isExistFlac;
- (_Bool)isExist320Kmp3;
- (id)getURLByRate:(int)arg1;
- (id)getURLByRate:(int)arg1 forDownload:(_Bool)arg2 assetsType:(int)arg3;
- (id)getURLByRate:(int)arg1 forDownload:(_Bool)arg2;
- (struct SFlexInteger)isPaidContent;
- (void)setURL:(id)arg1 byRate:(int)arg2;
- (_Bool)supportByQPlay;
- (_Bool)isSQSongConfigured;
- (_Bool)isHQSongConfigured;
- (id)getQPlaySongURLString:(int)arg1;
- (id)getQPlaySongURLString;
- (id)getSongUrlForDownloadedFile;
- (_Bool)isEmptySongUrl;
@property(readonly) __weak NSString *song_ErrDownMsg;
@property(readonly) __weak NSString *song_ErrFavMsg;
@property(readonly) __weak NSString *song_ErrShareMsg;
@property(readonly) __weak NSString *song_ErrMsg;
- (void)deleteAllMaybeFiles;
- (id)allMayBeFiles;
- (void)startFreshSongInfo;
- (_Bool)isUpLimitRate:(int)arg1;
- (int)_songRateTypeExisted;
- (int)_songRateTypeCapacity;
- (_Bool)isGososoSong;
- (_Bool)isMVSongAll;
- (_Bool)isQQSongAll;
- (_Bool)isLocalLinkSong;
- (_Bool)isSosoSong;
- (struct SFlexInteger)fiIsImportSong;
- (_Bool)isImportSong;
- (_Bool)isValidFakeSong;
- (_Bool)isLocalLinkSongExistLocalFile;
- (_Bool)isLocalLinkSongIPodURL;
- (_Bool)isLocalLinkIPodSong;
- (_Bool)isIPodSong;
- (_Bool)isDownloadOk;
- (_Bool)isInDownloadedList;
- (_Bool)isExistLocalFile;
- (id)initWithCoder:(id)arg1;
- (id)getFileTitle;
- (id)fixSong_DownLoadFilePath:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
@property(readonly) __weak NSString *song_Singer_Index;
@property(readonly) SingerInfo *defaultSinger; // @synthesize defaultSinger;
@property(readonly) __weak NSString *song_SingerOrgName;
@property(readonly) __weak NSString *song_Singer;
@property(readonly) __weak NSString *song_Album_Index;
@property(readonly) __weak NSString *song_Album;
@property(readonly) unsigned long long defaultSingerId;
@property(readonly) unsigned long long albumId;
@property(readonly) int song_DownloadFileRate;
- (int)song_DownloadFileRate_downloadAll;
- (int)getSongRateTypeByQuality:(int)arg1;
@property int song_DownloadFileSize; // @synthesize song_DownloadFileSize;
@property(retain) NSString *song_DownLoadFilePath; // @synthesize song_DownLoadFilePath;
@property(retain) NSString *dbDownLoadFilePath;
- (void)SetSinger:(id)arg1;
- (id)song_Name_Index;
- (void)setSong_Name_Index:(id)arg1;
- (id)song_Name;
- (void)setSong_Name:(id)arg1;
- (void)addDelegate:(id)arg1;
- (id)init;
- (id)initWithSongType:(int)arg1 songID:(unsigned long long)arg2;

@end
