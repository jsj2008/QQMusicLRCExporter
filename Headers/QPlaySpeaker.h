//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jan  4 2017 14:06:37).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "QPlayDMR.h"

@class NSDate, NSDictionary, NSMutableDictionary, NSMutableSet, NSString, NSTimer, NSURL, QPlayQueue, SongInfo;

@interface QPlaySpeaker : QPlayDMR
{
    float rate;
    CDStruct_1b6d18a9 currentTime;
    NSDate *pauseTime;
    float volume;
    NSURL *currentAVTransportURI;
    NSURL *expectURI;
    NSMutableDictionary *last5AVTransportURI;
    NSURL *nextAVTransportURI;
    NSDate *positionSnapshotTimeStamp;
    CDStruct_1b6d18a9 positionSnapshot;
    CDStruct_1b6d18a9 duration;
    NSDictionary *playbackEventing;
    _Bool trackReachedEnd;
    _Bool paused_playing;
    _Bool isMuted;
    long long actionTimeOutCount;
    NSString *QPlayVersion;
    double _lastVolumeSetTime;
    double _lastVolumeEffectSetTime;
    double _lastStopedRecTime;
    double timeOfSetAVTransportURI;
    _Bool isSuccessOfSetAVTransportURI;
    NSMutableSet *subscribedServices;
    QPlayQueue *queue;
    QPlayQueue *aQueue;
    unsigned long long queueCapability;
    _Bool authed;
    _Bool qplayAuthed;
    NSTimer *subscribeTimer;
    _Bool occupied;
    _Bool firstChosed;
    double firstChosedTime;
    _Bool _supportFlac;
    _Bool _hasCheckFlac;
    _Bool _hasSubscribe;
    int expectedQueueUpdateID;
    int _supportLyricType;
    NSTimer *_timerPlayEmptySound;
    NSTimer *_timerCheckPlaying;
    double _playEndTime;
    long long _songIndex;
    SongInfo *_currentSingleSong;
}

+ (id)createPlaybackEventing:(int)arg1 value:(id)arg2;
+ (int)DMRType:(id)arg1 identifier:(id)arg2;
@property(nonatomic) SongInfo *currentSingleSong; // @synthesize currentSingleSong=_currentSingleSong;
@property(nonatomic) _Bool hasSubscribe; // @synthesize hasSubscribe=_hasSubscribe;
@property(nonatomic) int supportLyricType; // @synthesize supportLyricType=_supportLyricType;
@property(nonatomic) _Bool hasCheckFlac; // @synthesize hasCheckFlac=_hasCheckFlac;
@property(nonatomic) _Bool supportFlac; // @synthesize supportFlac=_supportFlac;
@property(nonatomic) long long songIndex; // @synthesize songIndex=_songIndex;
@property(nonatomic) double playEndTime; // @synthesize playEndTime=_playEndTime;
@property(retain, nonatomic) NSTimer *timerCheckPlaying; // @synthesize timerCheckPlaying=_timerCheckPlaying;
@property(retain, nonatomic) NSTimer *timerPlayEmptySound; // @synthesize timerPlayEmptySound=_timerPlayEmptySound;
@property(nonatomic) _Bool occupied; // @synthesize occupied;
@property(nonatomic) double firstChosedTime; // @synthesize firstChosedTime;
@property(nonatomic) _Bool firstChosed; // @synthesize firstChosed;
@property(retain, nonatomic) NSTimer *subscribeTimer; // @synthesize subscribeTimer;
@property(nonatomic) _Bool qplayAuthed; // @synthesize qplayAuthed;
@property(nonatomic) _Bool authed; // @synthesize authed;
@property(retain, nonatomic) NSDate *pauseTime; // @synthesize pauseTime;
@property(nonatomic) unsigned long long queueCapability; // @synthesize queueCapability;
@property(nonatomic) int expectedQueueUpdateID; // @synthesize expectedQueueUpdateID;
@property(retain, nonatomic) QPlayQueue *aQueue; // @synthesize aQueue;
@property(retain, nonatomic) QPlayQueue *queue; // @synthesize queue;
@property(nonatomic) _Bool paused_playing; // @synthesize paused_playing;
@property(retain, nonatomic) NSString *QPlayVersion; // @synthesize QPlayVersion;
@property(readonly, nonatomic) NSMutableSet *subscribedServices; // @synthesize subscribedServices;
@property(nonatomic) _Bool isSuccessOfSetAVTransportURI; // @synthesize isSuccessOfSetAVTransportURI;
@property(nonatomic) double timeOfSetAVTransportURI; // @synthesize timeOfSetAVTransportURI;
@property(nonatomic) _Bool isMuted; // @synthesize isMuted;
@property(retain, nonatomic) NSMutableDictionary *last5AVTransportURI; // @synthesize last5AVTransportURI;
@property(nonatomic) long long actionTimeOutCount; // @synthesize actionTimeOutCount;
@property(nonatomic) _Bool trackReachedEnd; // @synthesize trackReachedEnd;
@property(retain, nonatomic) NSDictionary *playbackEventing; // @synthesize playbackEventing;
@property(nonatomic) CDStruct_1b6d18a9 duration; // @synthesize duration;
@property(retain, nonatomic) NSDate *positionSnapshotTimeStamp; // @synthesize positionSnapshotTimeStamp;
@property(nonatomic) CDStruct_1b6d18a9 positionSnapshot; // @synthesize positionSnapshot;
@property(retain, nonatomic) NSURL *nextAVTransportURI; // @synthesize nextAVTransportURI;
@property(retain, nonatomic) NSURL *expectURI; // @synthesize expectURI;
@property(retain, nonatomic) NSURL *currentAVTransportURI; // @synthesize currentAVTransportURI;
@property(nonatomic) float volume; // @synthesize volume;
@property(nonatomic) float rate; // @synthesize rate;
- (void).cxx_destruct;
- (void)setLyric:(unsigned long long)arg1 WithText:(id)arg2;
- (void)getLyricSupportType;
- (void)endStatistics;
- (void)startStatistics;
- (void)startConnect;
- (void)auth;
- (long long)queuePlayingIndex;
- (void)tryToAttach;
- (void)save;
- (void)_attachWithSongs:(id)arg1 queueID:(int)arg2 result:(id)arg3;
- (void)attachInQueue:(int)arg1 result:(id)arg2;
- (void)attachQueue;
- (void)_updatePlayingListByQueue:(id)arg1;
- (void)updatePlayingList:(id)arg1;
- (void)switchToTrackInQueueAtIndex:(long long)arg1;
- (void)setAVTransportURIToNil;
- (_Bool)setCurrentURIStringForQueue:(id)arg1;
- (id)uriOfOwnQueue;
- (void)removeTracksInRangeFromQueue:(struct _NSRange)arg1;
- (void)addTracks:(id)arg1 toQueueAtIndex:(long long)arg2;
- (id)currentPlayingSong;
- (id)songInTheQueueByIndex:(long long)arg1;
- (long long)indexOfTrackInQueue:(id)arg1;
- (long long)indexOfSongInQueue:(id)arg1;
- (_Bool)isSongInTheQueue:(id)arg1;
- (id)getTrack:(id)arg1;
- (_Bool)isSameQueue:(id)arg1;
- (void)playQueueAtIndex:(long long)arg1;
- (void)playSongInQueue:(id)arg1;
- (void)setPlayMode:(id)arg1;
- (_Bool)clearQueue;
- (id)makeArgForAddMultipleURIs:(id)arg1 toQueueAtIndex:(long long)arg2;
- (void)addTracksThanPlay:(id)arg1 toQueueAtIndex:(long long)arg2;
- (void)qplayQueue4;
- (void)playQueue3;
- (void)playQueue2:(id)arg1;
- (void)playQueue:(id)arg1;
- (id)makeUrisAndMetadata:(id)arg1;
- (_Bool)replaceAllTracks:(id)arg1 currentTrackIndex:(long long)arg2 newCurrentTrackIndex:(long long)arg3 newNextTrackIndex:(long long)arg4;
- (void)replaceQueue:(id)arg1;
- (_Bool)isLastSongInQueue:(id)arg1;
- (void)updateQQueue:(id)arg1;
- (void)updateQPlaySong:(id)arg1;
- (void)sendOutVolumeChangedNotification:(float)arg1;
- (long long)sortDevice:(id)arg1;
- (_Bool)supportQPlay;
- (void)fillLast5AVTransportURI:(id)arg1;
- (void)cleanLocalQueue;
- (void)cleanup;
- (void)restoreDefaultStat;
- (id)description;
- (void)previous;
- (void)next;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1;
- (void)stop;
- (void)pause;
- (void)play;
- (void)GetProtocolInfo;
- (void)GetTransportInfo;
- (void)getValid;
- (void)DeviceOccupied;
- (void)deviceBusy;
- (void)getMediaInfo;
- (void)getSpeakerQueueId;
- (void)getMute;
- (float)getSpeakerCurrentVolume;
- (void)delaySendPlayEndEvent;
- (id)getVolumeKey;
- (void)delayPlay;
@property(readonly, nonatomic) CDStruct_1b6d18a9 currentTime; // @synthesize currentTime;
- (void)snapshotPosition;
- (void)releaseControl;
- (void)setLostControl:(_Bool)arg1;
- (void)setMute:(_Bool)arg1;
- (void)sendVolumeAction:(id)arg1;
- (void)setVolume:(float)arg1 filter:(_Bool)arg2;
- (void)startVolumechange;
- (id)getContextFromMetaData:(id)arg1;
- (unsigned long long)getSongIDFromMetaData:(id)arg1;
- (_Bool)isSpeakerURLSameWithLast5URL:(id)arg1;
- (_Bool)isSpeakerURLInTheQueue:(id)arg1;
- (id)songInTheQueueByID:(unsigned long long)arg1;
- (id)songInTheQueue:(id)arg1;
- (int)qplayMode;
- (void)didReceiveSAVTChange:(id)arg1;
- (void)didReceiveAVTChangeForPlaying;
- (void)DealWithQAVTChange:(int)arg1;
- (void)AVTransportURI_Has_A_differentQueueID:(struct _NSRange)arg1 AVTransportURI:(id)arg2;
- (void)didReceiveQAVTChange:(id)arg1;
- (void)didReceiveAVTChange:(id)arg1;
- (void)didReceiveCMChange:(id)arg1;
- (void)didReceiveQChange:(id)arg1;
- (void)didReceiveRCChange:(id)arg1;
- (void)repeatSetCurrentURI:(id)arg1;
- (_Bool)setCurrentURIString:(id)arg1 metadata:(id)arg2;
- (void)setCurrentURI:(id)arg1 metadata:(id)arg2;
- (void)stopPlayEmptyTimer;
- (void)playEmptySound:(id)arg1;
- (void)checkFlac;
- (void)checkPlaying;
- (void)setCurrentItem:(id)arg1;
- (void)playSingleSong:(id)arg1;
- (_Bool)performAction:(id)arg1 serviceID:(id)arg2 arguments:(id)arg3 result:(id *)arg4 actionErrorCode:(int *)arg5;
- (_Bool)performAction:(id)arg1 serviceID:(id)arg2 arguments:(id)arg3 result:(id *)arg4;
- (_Bool)performCMAction:(id)arg1 arguments:(id)arg2 result:(id *)arg3;
- (_Bool)performRCAction:(id)arg1 arguments:(id)arg2 result:(id *)arg3;
- (_Bool)performGRCAction:(id)arg1 arguments:(id)arg2 result:(id *)arg3;
- (_Bool)performQPlayAction:(id)arg1 arguments:(id)arg2 result:(id *)arg3;
- (_Bool)performAVTAction:(id)arg1 arguments:(id)arg2 result:(id *)arg3;
- (_Bool)performQAction:(id)arg1 arguments:(id)arg2 result:(id *)arg3;
- (void)unsubscribe;
- (id)getAllNeededServices;
- (void)subscribe;
- (void)setLogo:(id)arg1;
- (id)getHLogoName;
- (id)getLogoName;
- (int)getDMRType;
- (void)dealloc;

@end

