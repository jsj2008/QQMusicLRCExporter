//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jan  4 2017 14:06:37).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "ProtocolHostDelegate-Protocol.h"

@class FolderInfo, ListBase, MyMusicSearch, NSArray, NSMutableArray, RoamingSongsProtocol;

@interface MyMusic : NSObject <ProtocolHostDelegate>
{
    _Bool _isUserCustomSetRecentPlayCount;
    int _eMyMusicStatus;
    FolderInfo *_iPodFolder;
    FolderInfo *_pcImportFolder;
    FolderInfo *_recentPlayFolder;
    MyMusicSearch *_myMusicSearch;
    RoamingSongsProtocol *_roamingSongProtocol;
    NSArray *_allSongs;
    NSArray *_albums;
    NSArray *_singers;
    ListBase *_allsongsList;
    ListBase *_albumsList;
    ListBase *_singersList;
    ListBase *_albumSongsList;
    ListBase *_singerSongsList;
    ListBase *_iPodSongsList;
    ListBase *_pcImportSongsList;
    ListBase *_recentPlaySongsList;
    NSMutableArray *_roamingSongListArray;
    NSMutableArray *_moreRoamingSongsArray;
    NSArray *_allSongsIndexItems;
    NSArray *_albumsIndexItems;
    NSArray *_singersIndexItems;
    NSArray *_albumSongsIndexItems;
    NSArray *_singerSongsIndexItems;
    NSArray *_iPodSongsIndexItems;
    NSArray *_importSongsIndexItems;
}

@property(retain) NSArray *importSongsIndexItems; // @synthesize importSongsIndexItems=_importSongsIndexItems;
@property(retain) NSArray *iPodSongsIndexItems; // @synthesize iPodSongsIndexItems=_iPodSongsIndexItems;
@property(retain) NSArray *singerSongsIndexItems; // @synthesize singerSongsIndexItems=_singerSongsIndexItems;
@property(retain) NSArray *albumSongsIndexItems; // @synthesize albumSongsIndexItems=_albumSongsIndexItems;
@property(retain) NSArray *singersIndexItems; // @synthesize singersIndexItems=_singersIndexItems;
@property(retain) NSArray *albumsIndexItems; // @synthesize albumsIndexItems=_albumsIndexItems;
@property(retain) NSArray *allSongsIndexItems; // @synthesize allSongsIndexItems=_allSongsIndexItems;
@property(retain, nonatomic) NSMutableArray *moreRoamingSongsArray; // @synthesize moreRoamingSongsArray=_moreRoamingSongsArray;
@property(retain) NSMutableArray *roamingSongListArray; // @synthesize roamingSongListArray=_roamingSongListArray;
@property(retain) ListBase *recentPlaySongsList; // @synthesize recentPlaySongsList=_recentPlaySongsList;
@property(retain) ListBase *pcImportSongsList; // @synthesize pcImportSongsList=_pcImportSongsList;
@property(retain) ListBase *iPodSongsList; // @synthesize iPodSongsList=_iPodSongsList;
@property(retain) ListBase *singerSongsList; // @synthesize singerSongsList=_singerSongsList;
@property(retain) ListBase *albumSongsList; // @synthesize albumSongsList=_albumSongsList;
@property(retain) ListBase *singersList; // @synthesize singersList=_singersList;
@property(retain) ListBase *albumsList; // @synthesize albumsList=_albumsList;
@property(retain) ListBase *allsongsList; // @synthesize allsongsList=_allsongsList;
@property(retain) NSArray *singers; // @synthesize singers=_singers;
@property(retain) NSArray *albums; // @synthesize albums=_albums;
@property(retain) NSArray *allSongs; // @synthesize allSongs=_allSongs;
@property(nonatomic) _Bool isUserCustomSetRecentPlayCount; // @synthesize isUserCustomSetRecentPlayCount=_isUserCustomSetRecentPlayCount;
@property(retain, nonatomic) RoamingSongsProtocol *roamingSongProtocol; // @synthesize roamingSongProtocol=_roamingSongProtocol;
@property(readonly) MyMusicSearch *myMusicSearch; // @synthesize myMusicSearch=_myMusicSearch;
@property(readonly) int eMyMusicStatus; // @synthesize eMyMusicStatus=_eMyMusicStatus;
@property(readonly) FolderInfo *recentPlayFolder; // @synthesize recentPlayFolder=_recentPlayFolder;
@property(readonly) FolderInfo *pcImportFolder; // @synthesize pcImportFolder=_pcImportFolder;
@property(readonly) FolderInfo *iPodFolder; // @synthesize iPodFolder=_iPodFolder;
- (void).cxx_destruct;
- (void)hostCallBackWithWorkProtocol:(id)arg1 protocolError:(id)arg2;
- (void)getRoamingSongsListDataFromSerial:(unsigned long long)arg1 toSerial:(unsigned long long)arg2 listBaseindex:(unsigned long long)arg3;
- (_Bool)moreRoamingSongsExistsForIndex:(unsigned long long)arg1;
- (id)roamingListbaseForIndex:(unsigned long long)arg1;
- (void)prepareListBaseForRoamingSongs;
- (int)songDownloadStatus:(id)arg1;
- (void)deleteRecentPlayBySongArray:(id)arg1 updateAll:(_Bool)arg2;
- (id)_findSongInfoInFolderSongs:(id)arg1 songInfo:(id)arg2;
- (id)findSongInfoInFolderSongs:(id)arg1 songInfo:(id)arg2;
- (_Bool)findSongInRecentPlay:(id)arg1;
- (unsigned long long)getRecentPlayMaxCount;
- (_Bool)_limitRecentPlayFolderSongs:(_Bool)arg1 deleteEntryFile:(_Bool *)arg2;
- (void)onRecentPlayMaxCountMaybeChange;
- (void)setRecentPlaySongInfo:(id)arg1;
- (void)_onRecentPlayCountChange:(id)arg1;
- (void)_flushRecentPlaySongsBeforeDataReady;
- (void)_insertRecentPlaySongInfo:(id)arg1;
- (void)cleanRecentPlayList;
- (_Bool)tryDeleteDiskFileBySongInfo:(id)arg1;
- (_Bool)tryDeleteDiskFileBySongWithExpInfos:(id)arg1;
- (void)deleteSongsFromAllMusic:(id)arg1;
- (void)deleteSongsFromAllMusic:(id)arg1 force:(_Bool)arg2;
- (void)deleteSongFromALLMusicAfterCheckedMyFolder:(id)arg1;
- (void)deleteSongsFromAllMusicExpertTaoSong:(id)arg1;
- (void)deleteSongsFromeFolder:(id)arg1 songInfo:(id)arg2;
- (void)deleteSongsFromAllMusic:(id)arg1 isLocalMode:(_Bool)arg2;
- (void)deleteSongsInfoFromAll:(id)arg1;
- (void)onCloudFolderLoaded;
- (void)onRecentPlayAndIPodSongsLoaded;
- (void)onDownloadedSongLoaded;
- (void)onSomeThingLoaded;
- (void)deleteImportBySongInfo:(id)arg1;
- (void)deleteIPodBySongInfo:(id)arg1;
- (int)getAllSongsLocalCount;
- (int)getAllSongsTotalCount;
- (void)updateSongErr:(id)arg1;
- (_Bool)continueUserActivity:(id)arg1;
- (void)updateSpotlightBySongs:(id)arg1;
- (id)spotlightDefaultThumbnailData;
- (id)createSearchableItemBySongInfo:(id)arg1 defaultThumbnailData:(id)arg2;
- (id)createSpolightThumbnailData:(id)arg1 defaultThumbnailData:(id)arg2;
- (void)updateSpotlight;
- (void)updateAll;
- (id)createIndexItemsByListBase:(id)arg1;
- (void)tryRestorePlaylist;
- (void)updateSongListforKey:(id)arg1 inArray:(id)arg2 toResult:(id)arg3 isAlbum:(_Bool)arg4;
- (void)sortClusterInfo:(id)arg1;
- (void)sortAllSongs:(id)arg1;
- (void)addFolderSongs:(id)arg1 toAllSongs:(id)arg2 withLocalPlayMode:(_Bool)arg3;
- (id)getBackupArray:(id)arg1;
- (void)addFolderSong:(struct ObjectWithExpInfo *)arg1 toAlbums:(id)arg2 andSingers:(id)arg3;
- (void)addFolderSong:(struct ObjectWithExpInfo *)arg1 toAllSongs:(id)arg2 withLocalPlayMode:(_Bool)arg3;
- (void)addSong:(id)arg1 expInfo:(id)arg2 toAllSongs:(id)arg3 withLocalPlayMode:(_Bool)arg4 careOpType:(_Bool)arg5;
- (void)onActiveAlbumSong:(id)arg1;
- (long long)activeAlubmSongsInLocalQQLibray;
- (long long)activeSingerSongsInLocalQQLibrary;
- (void)onActiveSingerSong:(id)arg1;
- (void)reloadData;
- (id)loadFolderInfo:(unsigned long long)arg1 folderId:(int)arg2 FolderType:(int)arg3 Tid:(long long)arg4;
- (id)loadListBase:(int)arg1;
- (id)getIndexItemsByListTagType:(int)arg1;
- (void)_checkRecentPlayExistWrongiPodFile;
- (void)asynScanIpodFile:(_Bool)arg1;
- (void)asynScanImportSong;
- (void)_loginFailed;
- (void)_logout;
- (void)_loginSuccess;
- (id)init;
- (void)dealloc;

@end

